import React, { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import bgImage from '../assets/maroonbg.jpg'; // Ensure this image is available

const PlayOpenPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { sattaName } = location.state || {};
  const [market, setMarket] = useState('');
  const [biddingItems, setBiddingItems] = useState([]);
  const [biddingNumber, setBiddingNumber] = useState('');
  const [points, setPoints] = useState('');

  const handleAddBidding = () => {
    if (biddingNumber && points) {
      const newBiddings = [];

      console.log("Market value:", market);
    console.log("Bidding Number:", biddingNumber, "Points:", points);
  
   
    if (market.toLowerCase() === 'default') {
      newBiddings.push({ openClose: 'Open', digit: biddingNumber, points });

      console.log("Default Market - New Biddings:", newBiddings);

      // Update your state or data here
      setBiddingNumber((prevBiddings) => [...prevBiddings, ...newBiddings]); // Assuming `setBiddings` is your state setter
    }
  


  
      if (market.toLowerCase() === 'sp') {
        const spMapping = {
          0: ["127", "136", "145", "190", "235", "280", "370", "389", "460", "479", "569", "578"],
          1: ["128", "137", "146", "236", "245", "290", "380", "470", "489", "560", "579", "678"],
          2: ["129", "138", "147", "156", "237", "246", "345", "390", "480", "570", "589", "679"],
          3: ["120", "139", "148", "157", "238", "247", "256", "346", "490", "580", "670", "689"],
          4: ["130", "149", "158", "167", "239", "248", "257", "347", "356", "590", "680", "789"],
          5: ["140", "159", "168", "230", "249", "258", "267", "348", "357", "456", "690", "780"],
          6: ["123", "150", "169", "178", "240", "259", "268", "349", "358", "367", "457", "790"],
          7: ["124", "160", "179", "250", "269", "278", "340", "359", "368", "458", "467", "890"],
          8: ["125", "134", "170", "189", "260", "279", "350", "369", "378", "459", "468", "567"],
          9: ["126", "135", "180", "234", "270", "289", "360", "379", "450", "469", "478", "568"]
        };
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const spNumbers = spMapping[digit] || [];
          spNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for SP market.');
          return;
        }
      }
  
      if (market.toLowerCase() === 'dpt') {
        const dptMapping = {
          0: ["118", "226", "244", "299", "334", "488", "550", "668", "677", "000"],
          1: ["100", "119", "155", "227", "335", "344", "399", "588", "669", "777"],
          2: ["110", "200", "228", "255", "336", "499", "660", "688", "778", "444"],
          3: ["166", "229", "300", "337", "355", "445", "599", "779", "788", "111"],
          4: ["112", "220", "266", "338", "400", "446", "455", "699", "770", "888"],
          5: ["113", "122", "177", "339", "366", "447", "500", "799", "889", "555"],
          6: ["114", "277", "330", "448", "466", "556", "600", "880", "899", "222"],
          7: ["115", "133", "188", "223", "377", "449", "557", "566", "700", "999"],
          8: ["116", "224", "233", "288", "440", "477", "558", "800", "990", "666"],
          9: ["117", "144", "199", "225", "388", "559", "577", "667", "900", "333"]
        };
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const dptNumbers = dptMapping[digit] || [];
          dptNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for DPT market.');
          return;
        }
      }


      if (market.toLowerCase() === 'cp') {
        const cpMapping = {
          10: ["100", "110", "120", "130", "140", "150", "160", "170", "180", "190"],
          11: ["110", "111", "112", "113", "114", "115", "116", "117", "118", "119"],
          12: ["112", "120", "122", "123", "124", "125", "126", "127", "128", "129"],
          13: ["113", "123", "130", "133", "134", "135", "136", "137", "138", "139"],
          14: ["114", "124", "134", "140", "144", "145", "146", "147", "148", "149"],
          15: ["115", "125", "135", "145", "150", "155", "156", "157", "158", "159"],
          16: ["116", "126", "136", "146", "156", "160", "166", "167", "168", "169"],
          17: ["117", "127", "137", "147", "157", "167", "170", "177", "178", "179"],
          18: ["118", "128", "138", "148", "158", "168", "178", "180", "188", "189"],
          19: ["119", "129", "139", "149", "159", "169", "179", "189", "190", "199"],
          20: ["120", "200", "220", "230", "240", "250", "260", "270", "280", "290"],
          22: ["122", "220", "223", "224", "225", "226", "227", "228", "229", "222"],
          23: ["123", "230", "233", "234", "235", "236", "237", "238", "239", "223"],
          24: ["124", "240", "244", "245", "246", "247", "248", "249", "224", "234"],
          25: ["125", "250", "255", "256", "257", "258", "259", "225", "235", "245"],
          26: ["126", "260", "266", "267", "268", "269", "226", "236", "246", "256"],
          27: ["127", "270", "277", "278", "279", "227", "237", "247", "257", "267"],
          28: ["128", "280", "288", "289", "228", "238", "248", "258", "268", "278"],
          29: ["129", "290", "299", "229", "239", "249", "259", "269", "279", "289"],
          30: ["130", "230", "300", "330", "340", "350", "360", "370", "380", "390"],
          34: ["134", "234", "334", "340", "344", "345", "346", "347", "348", "349"],
          35: ["135", "350", "355", "335", "345", "235", "356", "357", "358", "359"],
          36: ["136", "360", "366", "336", "346", "356", "367", "368", "369", "236"],
          37: ["137", "370", "377", "337", "347", "357", "367", "378", "379", "237"],
          38: ["138", "380", "388", "238", "338", "348", "358", "368", "378", "389"],
          39: ["139", "390", "399", "349", "359", "369", "379", "389", "239", "339"],
          40: ["140", "240", "340", "400", "440", "450", "460", "470", "480", "490"],
          44: ["144", "244", "344", "440", "449", "445", "446", "447", "448", "444"],
          45: ["145", "245", "345", "450", "456", "457", "458", "459", "445", "455"],
          46: ["146", "460", "446", "467", "468", "469", "246", "346", "456", "466"],
          47: ["147", "470", "447", "478", "479", "247", "347", "457", "467", "477"],
          48: ["148", "480", "489", "248", "348", "448", "488", "458", "468", "478"],
          49: ["149", "490", "499", "449", "459", "469", "479", "489", "249", "349"],
          50: ["500", "550", "150", "250", "350", "450", "560", "570", "580", "590"],
          55: ["155", "556", "557", "558", "559", "255", "355", "455", "555", "550"],
          56: ["156", "556", "567", "568", "569", "356", "256", "456", "560", "566"],
          57: ["157", "257", "357", "457", "557", "578", "579", "570", "567", "577"],
          58: ["158", "558", "568", "578", "588", "589", "580", "258", "358", "458"],
          59: ["159", "259", "359", "459", "559", "569", "579", "589", "590", "599"],
          60: ["600", "160", "260", "360", "460", "560", "660", "670", "680", "690"],
          66: ["660", "667", "668", "669", "666", "166", "266", "366", "466", "566"],
          67: ["670", "167", "267", "367", "467", "567", "667", "678", "679", "677"],
          68: ["680", "688", "668", "678", "168", "268", "368", "468", "568", "689"],
          69: ["690", "169", "269", "369", "469", "569", "669", "679", "689", "699"],
          70: ["700", "170", "270", "370", "470", "570", "670", "770", "780", "790"],
          77: ["770", "177", "277", "377", "477", "577", "677", "778", "779", "777"],
          78: ["178", "278", "378", "478", "578", "678", "778", "788", "789", "780"],
          79: ["179", "279", "379", "479", "579", "679", "779", "789", "799", "790"],
          80: ["180", "280", "380", "480", "580", "680", "780", "880", "800", "890"],
          88: ["188", "288", "388", "488", "588", "688", "788", "889", "888", "880"],
          89: ["189", "289", "389", "489", "589", "689", "789", "889", "890", "899"],
          90: ["900", "190", "290", "390", "490", "590", "690", "790", "890", "900"],
          99: ["199", "299", "399", "499", "599", "699", "799", "899", "990", "999"],
          0: ["000"]
      };
      
      
        const digit = parseInt(biddingNumber, 10);
      
        if (!isNaN(digit)) {
          const cpNumbers = cpMapping[digit] || [];
          if (cpNumbers.length > 0) {
            cpNumbers.forEach((num) => {
              newBiddings.push({ openClose: 'open', digit: num, points });
            });
          } else {
            alert('No CP PANA numbers found for the given input.');
            return;
          }
        } else {
          alert('Please enter a valid CP PANA number.');
          return;
        }
      }


      if (market.toLowerCase() === 'berries') {
        const dptMapping = {
          0: ["290", "380", "470", "560", "390", "480", "570", "120", "490", "580", "670", "130", "590", "680", "140", "230", "690", "780", "150", "240","790", "160", "250", "340", "890", "170", "260", "350", "180", "270","360", "450", "190", "280", "370", "460"],
          1: ["128", "137", "146", "129", "138", "147", "156", "120", "139", "148","157", "130", "149", "158", "167", "140", "159", "168", "123", "150","169", "178", "124", "160", "179", "125", "134", "170", "189", "126","135", "180", "127", "136", "145", "190"],
          2: ["128", "236", "245", "290", "129", "237", "246", "120", "238", "247","256", "239", "248", "257", "230", "249", "258", "267", "123", "240","259", "268", "124", "250", "269", "278", "125", "260", "279", "126","234", "270", "289", "127", "280", "235"],
          3: ["137", "236", "380", "138", "237", "345", "390", "139", "238", "346","130", "239", "347", "356", "230", "348", "357", "123", "349", "358","367", "340", "359", "368", "134", "350", "369", "378", "135", "234","360", "379", "136", "235", "370", "389"],
          4: ["146", "246", "470", "489", "147", "246", "345", "480", "148", "247","346", "490", "149", "248", "347", "140", "249", "348", "456", "240","349", "457", "124", "340", "458", "467", "134", "459", "468", "234","450", "469", "478", "145", "460", "479"],
          5: [ "245", "560", "579", "156", "346", "570", "589", "157", "256", "580", 
            "158", "257", "356", "590", "159", "258", "357", "456", "150", "259", 
            "358", "457", "250", "359", "458", "125", "350", "459", "567", "135", 
            "450", "568", "145", "235", "569", "578"],
          6: [ "146", "236", "560", "678", "156", "246", "679", "256", "346", "670", 
            "689", "167", "356", "680", "168", "267", "456", "690", "169", "168", 
            "367", "160", "269", "368", "467", "260", "369", "468", "567", "126", 
            "360", "469", "568", "136", "460", "569"],
          7: ["137", "470", "579", "678", "147", "237", "570", "679", "157", "247", 
    "670", "167", "257", "347", "789", "267", "357", "780", "178", "367", 
    "457", "790", "179", "278", "467", "170", "279", "378", "567", "270", 
    "379", "478", "127", "370", "479", "578"],
          8: ["128", "380", "489", "678", "138", "480", "589", "148", "238", "580", 
    "689", "158", "248", "680", "789", "168", "258", "348", "780", "178", 
    "268", "358", "278", "368", "458", "890", "189", "378", "468", "180", 
    "289", "478", "568", "280", "389", "578"],
          9: [ "290", "489", "579", "129", "390", "589", "679", "139", "490", "689", 
            "149", "239", "590", "789", "159", "249", "690", "169", "259", "349", 
            "790", "179", "269", "359", "890", "189", "279", "369", "459", "289", 
            "379", "469", "190", "389", "479", "569"]
        };
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const dptNumbers = dptMapping[digit] || [];
          dptNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for berries market.');
          return;
        }
      }


      const setBiddingNumberDisabled = (disabled) => {
        document.getElementById("biddingNumberInput").disabled = disabled; // Assumes input has this ID
      };

      if (market.toLowerCase() === "half red bracket") {
        const halfRedNumbers = [
          "05", "16", "27", "38", "49", "50", "61", "72", "83", "94"
        ];
        halfRedNumbers.forEach((num) => {
          newBiddings.push({ openClose: "open", digit: num, points });
        });
        setBiddingNumberDisabled(true); // Disable user input for biddingNumber
      }
  
      if (market.toLowerCase() === "full red bracket") {
        const fullRedNumbers = [
          "00", "11", "22", "33", "44", "55", "66", "77", "88", "99"
        ];
        fullRedNumbers.forEach((num) => {
          newBiddings.push({ openClose: "open", digit: num, points });
        });
        setBiddingNumberDisabled(true); // Disable user input for biddingNumber
      }


      if (market.toLowerCase() === 'cht 30') {
        const cht30Mapping = {
          1: ["146", "380", "470"],
          2: ["138", "147", "570"],
          3: ["148", "247", "580"],
          4: ["149", "158", "257"],
          5: ["168", "249", "258"],
          6: ["169", "259", "358"],
          7: ["250", "269", "368"],
          8: ["279", "350", "269"],
          9: ["270", "360", "469"],
          0: ["136", "370", "479"]
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const cht30Numbers = cht30Mapping[digit] || [];
          cht30Numbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for CHT 30 market.');
          return;
        }
      }

      if (market.toLowerCase() === 'cht 40') {
        const cht40Mapping = {
          1: ["128", "236", "245","290"],
          2: ["129", "390", "589","679"],
          3: ["256", "346", "670","689"],
          4: ["130", "239", "347","356"],
          5: ["140", "230", "690","780"],
          6: ["178", "367", "457","790"],
          7: ["124", "340", "458","467"],
          8: ["125", "134", "170","189"],
          9: ["180", "289", "478","568"],
          0: ["145", "235", "569","578"]
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const cht40Numbers = cht40Mapping[digit] || [];
          cht40Numbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for CHT 40 game.');
          return;
        }
      }
  



      if (market.toLowerCase() === 'cht 50') {
        const cht50Mapping = {
          1: ["137", "146", "380", "470", "579"],
  2: ["138", "147", "246", "480", "570"],
  3: ["139", "148", "158", "247", "580"],
  4: ["149", "159", "248", "257", "680"],
  5: ["159", "168", "249", "258", "357"],
  6: ["169", "240", "259", "268", "358"],
  7: ["179", "250", "269", "359", "368"],
  8: ["260", "279", "350", "369", "468"],
  9: ["135", "270", "360", "379", "469"],
  0: ["136", "280", "370", "460", "479"]
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const cht50Numbers = cht50Mapping[digit] || [];
          cht50Numbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for CHT 50 game.');
          return;
        }
      }
  



      if (market.toLowerCase() === 'cht 70') {
        const cht70Mapping = {
          1: ["128", "236", "245", "290", "489", "560", "678"],
  2: ["129", "156", "237", "345", "390", "589", "679"],
  3: ["120", "238", "256", "346", "490", "670", "689"],
  4: ["130", "167", "239", "347", "356", "590", "789"],
  5: ["140", "230", "267", "348", "456", "690", "780"],
  6: ["123", "150", "178", "349", "367", "457", "790"],
  7: ["124", "160", "278", "340", "458", "467", "890"],
  8: ["125", "134", "170", "189", "378", "459", "567"],
  9: ["126", "180", "234", "289", "450", "478", "568"],
  0: ["127", "145", "190", "235", "389", "569", "578"]
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const cht70Numbers = cht70Mapping[digit] || [];
          cht70Numbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for CHT 70 game.');
          return;
        }
      }


      if (market.toLowerCase() === 'sp chaukada') {
        const spchdMapping = {
          0: ["127", "136", "145", "190", "235", "280", "370", "389", "460", "479", "569", "578"],
          1: ["128", "137", "146", "236", "245", "290", "380", "470", "489", "560", "579", "678"],
          2: ["129", "138", "147", "156", "237", "246", "345", "390", "480", "570", "589", "679"],
          3: ["120", "139", "148", "157", "238", "247", "256", "346", "490", "580", "670", "689"],
          4: ["130", "149", "158", "167", "239", "248", "257", "347", "356", "590", "680", "789"],
          5: ["140", "159", "168", "230", "249", "258", "267", "348", "357", "456", "690", "780"],
          6: ["123", "150", "169", "178", "240", "259", "268", "349", "358", "367", "457", "790"],
          7: ["124", "160", "179", "250", "269", "278", "340", "359", "368", "458", "467", "890"],
          8: ["125", "134", "170", "189", "260", "279", "350", "369", "378", "459", "468", "567"],
          9: ["126", "135", "180", "234", "270", "289", "360", "379", "450", "469", "478", "568"],
        };
      
        if (biddingNumber.includes('-')) {
          const [prefix, start] = biddingNumber.split('-');
          if (!prefix || isNaN(start)) {
            alert('Invalid input format. Please use the format "123-1".');
            return;
          }
      
          const startNum = parseInt(start, 10);
          
          // Ensure we append to the existing newBiddings array
          for (let i = startNum; i <= startNum + 2; i++) { // Generate for 3 sequences
            const currentList = spchdMapping[i % 10]; // Wrap around safely
            currentList.forEach((num) => {
              newBiddings.push({ openClose: 'open', digit: `${num}`, points });
            });
          }
      
          console.log('Generated Biddings for CPD:', newBiddings);
          return newBiddings;
        } else {
          alert('Please enter a valid input with the format "123-1" for sp chaukada market.');
          return;
        }
      }
      













      if (market.toLowerCase() === 'dpt common') {
        const dptCommonMapping = {
        0: ["100", "110", "200", "220", "300", "330", "400", "440", "500", "550", "600", "660", "700", "770", "800", "880", "900", "990", "000"],
        1: ["100", "110", "112", "113", "114", "115", "116", "117", "118", "119", "122", "133", "144", "155", "166", "177", "188", "199", "111"],
        2: ["112", "122", "200", "220", "223", "224", "225", "226", "227", "228", "229", "233", "244", "255", "266", "277", "288", "299", "222"],
        3: ["113", "133", "223", "233", "300", "330", "334", "335", "336", "337", "338", "339", "344", "355", "366", "377", "388", "399", "333"],
        4: ["114", "144", "224", "244", "334", "344", "400", "440", "445", "446", "447", "448", "449", "455", "466", "477", "488", "499", "444"],
        5: ["115", "155", "225", "255", "335", "355", "445", "455", "500", "550", "556", "557", "558", "559", "566", "577", "588", "599", "555"],
        6: ["116", "166", "226", "266", "336", "366", "366", "446", "466", "556", "566", "600", "660", "667", "668", "669", "677", "688", "699", "666"],
        7: ["117", "177", "227", "277", "337", "377", "447", "477", "557", "577", "667", "677", "700", "770", "778", "779", "788", "799", "777"],
        8: ["118", "188", "228", "288", "338", "388", "448", "488", "558", "588", "668", "688", "778", "788", "800", "880", "889", "899", "888"],
        9: ["119", "199", "229", "299", "339", "399", "449", "499", "559", "599", "669", "699", "779", "799", "889", "899", "900", "990", "999"]
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const dptCommonNumbers = dptCommonMapping[digit] || [];
          dptCommonNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for CHT 70 game.');
          return;
        }
      }


      if (market.toLowerCase() === 'dbl ghar') {
        // Numbers to add when Double Ghar market is selected
        const doubleGharNumbers = ["11", "22", "33", "44", "55", "66", "77", "88", "99", "00"];
        
        // If points are provided, add the double ghar numbers to the new biddings
        if (points && points.trim() !== "") {
            doubleGharNumbers.forEach((num) => {
                newBiddings.push({ openClose: 'open', digit: num, points });
            });
        } else {
            alert("Please enter valid points.");
            return; // Exit the function if points are not valid
        }
    }




      if (market.toLowerCase() === 'sp common') {
        const spcMapping = {
          0: ["120", "130", "140", "150", "160", "170", "180", "190", "230", "240", "250", "260", "270", "280", "290", "340", "350", "360", "370", "380", "390", "450", "460", "470", "480", "490", "560", "570", "580", "590", "670", "680", "690", "780", "790", "890"],
          1: ["120", "123", "124", "125", "126", "127", "128", "129", "130", "134", "135", "136", "137", "138", "139", "140", "145", "146", "147", "148", "149", "150", "156", "157", "158", "159", "160", "167", "168", "169", "170", "178", "179", "180", "189", "190"],
          2: ["120", "123", "124", "125", "126", "127", "128", "129", "230", "234", "235", "236", "237", "238", "239", "240", "245", "246", "247", "248", "249", "250", "256", "257", "258", "259", "260", "267", "268", "269", "270", "278", "279", "280", "289", "290"],
          3: ["123", "130", "134", "135", "136", "137", "138", "139", "230", "234", "235", "236", "237", "238", "239", "340", "345", "346", "347", "348", "349", "350", "356", "357", "358", "359", "360", "367", "368", "369", "370", "378", "379", "380", "389", "390"],
          4: ["124", "134", "140", "145", "146", "147", "148", "149", "234", "240", "245", "246", "247", "248", "249", "340", "345", "346", "347", "348", "349", "450", "456", "457", "458", "459", "460", "467", "468", "469", "470", "478", "479", "480", "489", "490"],
          5: ["125", "135", "145", "150", "156", "157", "158", "159", "235", "245", "250", "256", "257", "258", "259", "345", "350", "356", "357", "358", "359", "450", "456", "457", "458", "459", "560", "567", "568", "569", "570", "578", "579", "580", "589", "590"],
          6: ["126", "136", "146", "156", "160", "167", "168", "169", "236", "246", "256", "260", "267", "268", "269", "346", "356", "360", "367", "368", "369", "456", "460", "467", "468", "469", "560", "567", "568", "569", "670", "678", "679", "680", "689", "690"],
          7: ["127", "137", "147", "157", "167", "170", "178", "179", "237", "247", "257", "267", "270", "278", "279", "347", "357", "367", "370", "378", "379", "457", "467", "470", "478", "479", "567", "570", "578", "579", "670", "678", "679", "780", "789", "790"],
          8: ["128", "138", "148", "158", "168", "178", "180", "189", "238", "248", "258", "268", "278", "280", "289", "348", "358", "368", "378", "380", "389", "458", "468", "478", "480", "489", "568", "578", "580", "589", "678", "680", "689", "780", "789", "890"],
          9: ["129", "139", "149", "159", "169", "179", "189", "190", "239", "249", "259", "269", "279", "289", "290", "349", "359", "369", "379", "389", "390", "459", "469", "479", "489", "490", "569", "579", "589", "590", "679", "689", "690", "789", "790", "890"]
  
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const spcNumbers = spcMapping[digit] || [];
          spcNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for CHT 70 game.');
          return;
        }
      }






      if (market.toLowerCase() === 'jodi family') {
        const jfMapping = {
          0: ["55", "00", "50", "05"],
          11: ["11", "66", "16", "61"],
          12: ["12", "17", "21", "26", "62", "67", "71", "76"],
          13: ["13", "18", "31", "36", "63", "68", "81", "86"],
          14: ["14", "19", "41", "46", "64", "69", "91", "96"],
          15: ["01", "06", "10", "15", "51", "56", "60", "65"],
          16: ["11", "66", "16", "61"],
          17: ["12", "17", "21", "26", "62", "67", "71", "76"],
          18: ["13", "18", "31", "36", "63", "68", "81", "86"],
          19: ["14", "19", "41", "46", "64", "69", "91", "96"],
          20: ["02", "07", "20", "25", "52", "57", "70", "75"],
          21: ["12", "17", "21", "26", "62", "67", "71", "76"],
          22: ["22", "77", "27", "72"],
          23: ["23", "28", "32", "37", "73", "78", "82", "87"],
          24: ["24", "29", "42", "47", "74", "79", "92", "97"],
          25: ["02", "07", "20", "25", "52", "57", "70", "75"],
          26: ["12", "17", "21", "26", "62", "67", "71", "76"],
          27: ["22", "77", "27", "72"],
          28: ["03", "08", "30", "35", "53", "58", "80", "85"],
          29: ["24", "29", "42", "47", "74", "79", "92", "97"],
          30: ["03", "08", "30", "35", "53", "58", "80", "85"],
          31: ["13", "18", "31", "36", "63", "68", "81", "86"],
          32: ["23", "28", "32", "37", "73", "78", "82", "87"],
          33: ["33", "88", "38", "83"],
          34: ["34", "39", "43", "48", "84", "89", "93", "98"],
          35: ["03", "08", "30", "35", "53", "58", "80", "85"],
          36: ["13", "18", "31", "36", "63", "68", "81", "86"],
          37: ["23", "28", "32", "37", "73", "78", "82", "87"],
          38: ["33", "88", "38", "83"],
          39: ["34", "39", "43", "48", "84", "89", "93", "98"],
          40: ["04", "09", "40", "45", "54", "59", "90", "95"],
          41: ["04", "09", "40", "45", "54", "59", "90", "95"],
          42: ["24", "29", "42", "47", "74", "79", "92", "97"],
          43: ["34", "39", "43", "48", "84", "89", "93", "98"],
          44: ["44", "99", "94", "49"],
          45: ["04", "09", "40", "45", "54", "59", "90", "95"],
          46: ["14", "19", "41", "46", "64", "69", "91", "96"],
          47: ["24", "29", "42", "47", "74", "79", "92", "97"],
          48: ["34", "39", "43", "48", "84", "89", "93", "98"],
          49: ["44", "99", "49", "94"],
          50: ["55", "00", "05", "50"],
          51: ["01", "06", "10", "15", "51", "56", "60", "65"],
          52: ["02", "07", "20", "25", "52", "57", "70", "75"],
          53: ["03", "08", "30", "35", "53", "58", "80", "85"],
          54: ["04", "09", "40", "45", "54", "59", "90", "95"],
          55: ["55", "00", "50", "05"],
          56: ["01", "06", "10", "15", "51", "56", "60", "65"],
          57: ["02", "07", "20", "25", "52", "57", "70", "75"],
          58: ["03", "08", "30", "35", "53", "58", "80", "85"],
          59: ["04", "09", "40", "45", "54", "59", "90", "95"],
          60: ["01", "06", "10", "15", "51", "56", "60", "65"],
          61: ["11", "66", "16", "61"],
          62: ["12", "17", "21", "26", "62", "67", "71", "76"],
          63: ["13", "18", "31", "36", "63", "68", "81", "86"],
          64: ["14", "19", "41", "46", "64", "69", "91", "96"],
          65: ["01", "06", "10", "15", "51", "56", "60", "65"],
          66: ["11", "66", "16", "61"],
          67: ["12", "17", "21", "26", "62", "67", "71", "76"],
          68: ["13", "18", "31", "36", "63", "68", "81", "86"],
          69: ["14", "19", "41", "46", "64", "69", "91", "96"],
          70: ["02", "07", "20", "25", "52", "57", "70", "75"],
          71: ["12", "17", "21", "26", "62", "67", "71", "76"],
          72: ["22", "77", "27", "72"],
          73: ["23", "28", "32", "37", "73", "78", "82", "87"],
          74: ["24", "29", "42", "47", "74", "79", "92", "97"],
          75: ["02", "07", "20", "25", "52", "57", "70", "75"],
          76: ["12", "17", "21", "26", "62", "67", "71", "76"],
          77: ["22", "77", "72", "27"],
          78: ["23", "28", "32", "37", "73", "78", "82", "87"],
          79: ["24", "29", "42", "47", "74", "79", "92", "97"],
          80: ["03", "08", "30", "35", "53", "58", "80", "85"],
          81: ["13", "18", "31", "36", "63", "68", "81", "86"],
          82: ["23", "28", "32", "37", "73", "78", "82", "87"],
          83: ["33", "88", "38", "83"],
          84: ["34", "39", "43", "48", "84", "89", "93", "98"],
          85: ["03", "08", "30", "35", "53", "58", "80", "85"],
          86: ["13", "18", "31", "36", "63", "68", "81", "86"],
          87: ["23", "28", "32", "37", "73", "78", "82", "87"],
          88: ["33", "88", "38", "83"],
          89: ["34", "39", "43", "48", "84", "89", "93", "98"],
          90: ["04", "09", "40", "45", "54", "59", "90", "95"],
          91: ["14", "19", "41", "46", "64", "69", "91", "96"],
          92: ["24", "29", "42", "47", "74", "79", "92", "97"],
          93: ["34", "39", "43", "48", "84", "89", "93", "98"],
          94: ["44", "99", "94", "49"],
          95: ["04", "09", "40", "45", "54", "59", "90", "95"],
          96: ["14", "19", "41", "46", "64", "69", "91", "96"],
          97: ["24", "29", "42", "47", "74", "79", "92", "97"],
          98: ["34", "39", "43", "48", "84", "89", "93", "98"],
          99: ["44", "99", "94", "49"],
         
      };
      
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 2) {
          const digit = parseInt(biddingNumber, 10);
          const jfNumbers = jfMapping[digit] || [];
          jfNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for jodi family game.');
          return;
        }
      }







  
      
      if (market.toLowerCase() === 'sp motors') {
        const spMotorsMapping = {
          1234: ["123", "124", "134", "234"],
          12345: ["123", "124", "125", "134", "135", "145", "234", "235", "245", "345"],
          123456: [
            "123", "124", "125", "126", "134", "135", "136", "145", "146", "156",
            "234", "235", "236", "245", "246", "256", "345", "346", "356", "456"
          ],
          1234567: [
            "123", "124", "125", "126", "127", "134", "135", "136", "137", "145", "146", "147", 
            "156", "157", "167", "234", "235", "236", "237", "245", "246", "247", "256", "257", 
            "267", "345", "346", "347", "356", "357", "367", "456", "467", "567"
          ],
          12345678: [
            "123", "124", "125", "126", "127", "128", "134", "135", "136", "137", "138", "145",
            "146", "147", "148", "156", "157", "158", "167", "168", "178", "234", "235", "236",
            "237", "238", "245", "246", "247", "248", "256", "257", "258", "267", "268", "278",
            "345", "346", "347", "348", "356", "357", "358", "367", "368", "378", "456", "457",
            "458", "467", "468", "478", "567", "568", "578", "678"
          ],
          123456789: [
            "123", "124", "125", "126", "127", "128", "129", "134", "135", "136", "137", "138", "139",
            "145", "146", "147", "148", "149", "156", "157", "158", "159", "167", "168", "169", "178", 
            "179", "189", "234", "235", "236", "237", "238", "239", "245", "246", "247", "248", "249",
            "256", "257", "258", "259", "267", "268", "269", "278", "279", "289", "345", "346", "347",
            "348", "349", "356", "357", "358", "359", "367", "368", "369", "378", "379", "389", "456",
            "457", "458", "459", "467", "468", "469", "478", "479", "489", "567", "568", "569", "578",
            "579", "589", "678", "679", "689", "789"
          ]
        };
      
        if (!isNaN(biddingNumber) && ["1234", "12345", "123456", "1234567", "12345678", "123456789"].includes(biddingNumber)) {
          const digit = parseInt(biddingNumber, 10);
          const spMotorNumbers = spMotorsMapping[digit] || [];
          spMotorNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid value: 1234, 12345, 123456, 1234567, 12345678, or 123456789 for SP Motor game.');
          return;
        }
      }






      if (market.toLowerCase() === 'dp motors') {
        const dpMotorsMapping = {
          1234: [
            "112", "113", "114", "122", "133", "144", "223", "224", "233", "244", "334", "344"
          ],
          12345: [
            "112", "113", "114", "115", "122", "133", "144", "155", "223", "224", "225", 
            "233", "244", "255", "334", "335", "344", "355", "445", "455"
          ],
          123456: [
            "112", "113", "114", "115", "116", "122", "133", "144", "155", "166", "223", 
            "224", "225", "226", "233", "244", "255", "266", "334", "336", "344", "355", 
            "366", "445", "446", "455", "466", "556", "566"
          ],
          1234567: [
            "112", "113", "114", "115", "116", "117", "122", "133", "144", "155", "166", 
            "177", "223", "224", "225", "226", "227", "233", "244", "255", "266", "277", 
            "334", "335", "336", "337", "344", "355", "366", "377", "445", "446", "447", 
            "455", "466", "477", "556", "557", "566", "577", "667", "677"
          ],
          12345678: [
            "112", "113", "114", "115", "116", "117", "118", "122", "133", "144", "155", 
            "166", "177", "188", "223", "224", "225", "226", "227", "228", "233", "244", 
            "255", "266", "277", "288", "334", "335", "336", "337", "338", "344", "355", 
            "366", "377", "388", "445", "446", "447", "448", "455", "466", "477", "488", 
            "556", "557", "558", "566", "577", "588", "667", "668", "677", "688", "778", 
            "788"
          ],
          123456789: [
            "112", "113", "114", "115", "116", "117", "118", "119", "122", "133", "144", 
            "155", "166", "177", "188", "199", "223", "224", "225", "226", "227", "228", 
            "229", "233", "244", "255", "266", "277", "288", "299", "334", "335", "336", 
            "337", "338", "339", "344", "355", "366", "377", "388", "399", "445", "446", 
            "447", "448", "449", "455", "466", "477", "488", "499", "556", "557", "558", 
            "559", "566", "577", "588", "599", "667", "668", "669", "677", "688", "699", 
            "778", "779", "889", "899"
          ]
        };
        if (!isNaN(biddingNumber) && ["1234", "12345", "123456", "1234567", "12345678", "123456789"].includes(biddingNumber)) {
          const digit = parseInt(biddingNumber, 10);
          const dpMotorNumbers = dpMotorsMapping[digit] || [];
          dpMotorNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid value: 1234, 12345, 123456, 1234567, 12345678, or 123456789 for SP Motor game.');
          return;
        }
      }
      
  


      if (market.toLowerCase() === 'sp dp motors') {
        const spdpMotorsMapping = {
          1234: [
            "123", "124", "134", "234", "112", "113", "114", "122", "133", "144", "223", "224", "233", "244", "334", "344"
          ],
          12345: [
            "123", "124", "125", "134", "135", "145", "234", "235", "245", "345", "112", "113", "114", "115", "122", 
            "133", "144", "155", "223", "224", "225", "233", "244", "255", "334", "335", "344", "355", "445", "455"
          ],
          123456: [
            "123", "124", "125", "126", "134", "135", "136", "145", "146", "156", "234", "235", "236", "245", "246", 
            "256", "345", "346", "356", "456", "112", "113", "114", "115", "116", "122", "133", "144", "155", "166", 
            "223", "224", "225", "226", "233", "244", "255", "266", "334", "335", "336", "344", "355", "366", "445", 
            "446", "455", "466", "556", "566"
          ],
          1234567: [
            "123", "124", "125", "126", "127", "134", "135", "136", "137", "145", "146", "147", "156", "157", "167", 
            "234", "235", "236", "237", "245", "246", "247", "256", "257", "267", "345", "346", "347", "356", "357", 
            "367", "456", "457", "467", "567", "112", "113", "114", "115", "116", "117", "122", "133", "144", "155", 
            "166", "177", "223", "224", "225", "226", "227", "233", "244", "255", "266", "277", "334", "335", "336", 
            "337", "344", "355", "366", "377", "445", "446", "447", "455", "466", "477", "556", "557", "566", "577", 
            "667", "677"
          ],
          12345678: [
            "123", "124", "125", "126", "127", "128", "134", "135", "136", "137", "138", "145", "146", "147", "148", 
            "156", "157", "158", "167", "168", "178", "234", "235", "236", "237", "238", "245", "246", "247", "248", 
            "256", "257", "258", "267", "268", "278", "345", "346", "347", "348", "356", "357", "358", "367", "368", 
            "378", "456", "457", "458", "467", "468", "478", "567", "568", "578", "678", "112", "113", "114", "115", 
            "116", "117", "118", "122", "133", "144", "155", "166", "177", "188", "223", "224", "225", "226", "227", 
            "228", "233", "244", "255", "266", "277", "288", "334", "335", "336", "337", "338", "344", "355", "366", 
            "377", "388", "445", "446", "447", "448", "455", "466", "477", "488", "556", "557", "558", "566", "577", 
            "588", "667", "668", "677", "688", "778", "788"
          ],
          123456789: [
            "123", "124", "125", "126", "127", "128", "129", "134", "135", "136", "137", "138", "139", "145", "146", 
            "147", "148", "149", "156", "157", "158", "159", "167", "168", "169", "178", "189", "234", "235", "236", 
            "237", "238", "239", "245", "246", "247", "249", "256", "257", "258", "259", "267", "268", "269", "278", 
            "279", "289", "345", "346", "347", "348", "349", "356", "357", "358", "359", "367", "368", "369", "378", 
            "379", "389", "456", "457", "458", "459", "467", "468", "469", "478", "479", "489", "567", "568", "569", 
            "578", "579", "589", "678", "679", "689", "789", "112", "113", "114", "115", "116", "117", "118", "119", 
            "122", "133", "144", "155", "166", "177", "188", "199", "223", "224", "225", "226", "227", "228", "229", 
            "233", "244", "255", "266", "277", "288", "299", "334", "335", "336", "337", "338", "339", "344", "355", 
            "366", "377", "388", "399", "445", "446", "447", "448", "449", "455", "466", "477", "488", "499", "556", 
            "557", "558", "559", "566", "577", "588", "599", "667", "668", "669", "677", "688", "699", "778", "779", 
            "788", "799", "889", "899"
          ]
        };
        
        if (!isNaN(biddingNumber) && ["1234", "12345", "123456", "1234567", "12345678", "123456789"].includes(biddingNumber)) {
          const digit = parseInt(biddingNumber, 10);
          const spdpMotorNumbers = spdpMotorsMapping[digit] || [];
          spdpMotorNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid value: 1234, 12345, 123456, 1234567, 12345678, or 123456789 for SP Motor game.');
          return;
        }
      }




      if (market.toLowerCase() === 'pana family') {
        const panaFamilyMapping = {
       111: ["111", "116", "166", "666"],
  112: ["112", "117", "126", "167", "266", "667"],
  113: ["113", "118", "136", "168", "366", "668"],
  114: ["114", "119", "146", "169", "466", "669"],
  115: ["110", "115", "156", "160", "566", "660"],
  122: ["122", "127", "177", "226", "267", "677"],
  123: ["123", "128", "137", "178", "236", "268", "367", "678"],
  124: ["124", "129", "147", "179", "246", "269", "467", "679"],
  125: ["120", "125", "157", "170", "256", "260", "567", "670"],
  133: ["133", "138", "188", "336", "368", "688"],
  134: ["134", "139", "148", "189", "346", "369", "468", "689"],
  135: ["130", "135", "158", "180", "356", "360", "568", "680"],
  144: ["144", "149", "199", "446", "469", "699"],
  145: ["140", "145", "159", "190", "456", "460", "569", "690"],
  155: ["100", "150", "155", "556", "560", "600"],
  222: ["222", "227", "277", "777"],
  223: ["223", "228", "237", "278", "377", "778"],
  224: ["224", "229", "247", "279", "477", "779"],
  225: ["220", "225", "257", "270", "577", "770"],
  233: ["233", "238", "288", "337", "378", "788"],
  234: ["234", "239", "248", "289", "347", "379", "478", "789"],
  235: ["230", "235", "258", "280", "357", "370", "578", "780"],
  244: ["244", "249", "299", "447", "479", "799"],
  245: ["240", "245", "259", "290", "457", "470", "579", "790"],
  255: ["200", "250", "255", "557", "570", "700"],
  333: ["333", "338", "388", "888"],
  334: ["334", "339", "348", "389", "488", "889"],
  335: ["330", "335", "358", "380", "588", "880"],
  344: ["344", "349", "399", "448", "489", "899"],
  345: ["340", "345", "359", "390", "458", "480", "589", "890"],
  355: ["300", "350", "355", "558", "580", "800"],
  444: ["444", "449", "499", "999"],
  445: ["440", "445", "459", "490", "599", "990"],
  455: ["400", "450", "455", "559", "590", "900"],
  555: ["000", "500", "550", "555"]
        };
        
  
        if (!isNaN(biddingNumber) && biddingNumber.length === 1) {
          const digit = parseInt(biddingNumber, 10);
          const panaFamilyNumbers = panaFamilyMapping[digit] || [];
          panaFamilyNumbers.forEach((num) => {
            newBiddings.push({ openClose: 'open', digit: num, points });
          });
        } else {
          alert('Please enter a valid single-digit number for PANA FAMILY game.');
          return;
        }
      }

      

      setBiddingItems((prev) => [...prev, ...newBiddings]);
      setBiddingNumber('');
      // setPoints('');
    }
  };
  

  const handleDeleteBidding = (index) => {
    const updatedItems = biddingItems.filter((_, i) => i !== index);
    setBiddingItems(updatedItems);
  };

  const handleSubmitMarket = () => {
    if (!market) { 
      alert('Please select a market first.');
    } else {
      // Calculate total points
      const totalPoints = biddingItems.reduce(
        (total, item) => total + parseFloat(item.points || 0),
        0
      );
  
      // Pass all selected data to the checkout page
      navigate('/checkout', {
        state: {
          market,
          biddingItems,
          totalPoints,
          sattaName,
        },
      });
    }
  };
  
  return (
    <div
      className="min-h-screen bg-cover bg-center p-6 flex flex-col items-center"
      style={{ backgroundImage: `url(${bgImage})` }}
    >
      <h1 className="text-2xl font-bold text-white mb-4">
        {sattaName ? `${sattaName} - Open` : 'No Satta Selected'}
      </h1>

      {/* Dropdown and Submit Button in Same Line */}
      <div className="mb-6 flex items-center space-x-4">
        <div className="w-64">
          <select
            id="market"
            value={market}
            onChange={(e) => setMarket(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg"
          >
            <option value="default">DEFAULT</option>
            <option value="sp">SP</option>
            <option value="dpt">DPT</option>
            <option value="cp">CP</option>
            <option value="sp motors">SP MOTORS</option>
            <option value="dp motors">DP MOTORS</option>
            <option value="sp dp motors">SP DP MOTORS</option>
            <option value="sp common">SP COMMON</option>


            <option value="dpt common">DPT COMMON</option>

            <option value="dbl ghar">DOUBLE GHAR</option>
            <option value="berries">BERRIES</option>
            <option value="otc">OTC</option>
            <option value="half red bracket">HALF RED BRACKET</option>
            <option value="full red bracket">FULL RED BRACKET </option>
            <option value="jodi family">JODI FAMILY</option>
            <option value="sp chaukada">SP CHAUKADA </option>
            <option value="dpt chaukada">DPT CHAUKADA</option>
            <option value="bkt bracket">BKT BRACKET </option>

            
            <option value="pana family">PANA FAMILY</option>
            <option value="cht 30">CHT 30</option>
            <option value="cht 40">CHT 40</option>
            <option value="cht 50">CHT 50</option>
            <option value="cht 70">CHT 70</option>
          </select>
        </div>
        <button
          onClick={handleSubmitMarket}
          className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition duration-300"
        >
          Submit
        </button>
      </div>

      {/* Display Space for Added Items */}
      <div className="w-full max-w-md bg-white rounded-lg shadow-md p-4 mb-6">
        <h2 className="text-lg font-bold text-gray-700 mb-4">Bidding Items</h2>
        {biddingItems.length > 0 ? (
          <table className="w-full table-auto">
            <thead>
              <tr>
                <th className="py-2 px-4 text-left text-sm font-semibold">Open/Close</th>
                <th className="py-2 px-4 text-left text-sm font-semibold">Digit</th>
                <th className="py-2 px-4 text-left text-sm font-semibold">Points</th>
                <th className="py-2 px-4 text-left text-sm font-semibold"></th> {/* Empty Column for Delete */}
              </tr>
            </thead>
            <tbody>
              {biddingItems.map((item, index) => (
                <tr key={index} className="border-b border-gray-300">
                  <td className="py-2 px-4">{item.openClose}</td>
                  <td className="py-2 px-4">{item.digit}</td>
                  <td className="py-2 px-4">{item.points}</td>
                  <td className="py-2 px-4 text-red-500 cursor-pointer" onClick={() => handleDeleteBidding(index)}>
                    Delete
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p className="text-gray-500">No items added yet.</p>
        )}
      </div>


       {/* Total count of added items */}
       <div className="text-white mb-4">
        Total : {biddingItems.length}
      </div>

      {/* Input Section for Bidding */}
      <div className="flex flex-col space-y-4 w-full max-w-md">
        <div className="flex space-x-4">
          <input
           id="biddingNumberInput" 
            type="text"
            value={biddingNumber}
            onChange={(e) => setBiddingNumber(e.target.value)}
            placeholder="Bidding Number"
            className="flex-grow px-4 py-2 border border-gray-300 rounded-lg"
          />
          <input
            type="text"
            value={points}
            onChange={(e) => setPoints(e.target.value)}
            placeholder="Points"
            className="flex-grow px-4 py-2 border border-gray-300 rounded-lg"
          />
        </div>
        <button
          onClick={handleAddBidding}
          className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-300"
        >
          Add
        </button>
      </div>

      {/* Total Points */}
      <div className="mt-4 text-white text-lg font-semibold">
        Total Rs: {biddingItems.reduce((total, item) => total + parseFloat(item.points || 0), 0)}
      </div>
    </div>
  );
};

export default PlayOpenPage;
